@import url('https://fonts.googleapis.com/css2?family=Kanit:wght@300;500&display=swap');

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans',
    'Droid Sans', 'Helvetica Neue', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

b,
strong {
  font-weight: bold;
}

#app {
  display: flex;
  flex: 1;
  flex-direction: column;
  min-height: 100vh;
}

._theme {
  display: flex;
  flex: 1;
}

._backgroundColorTransition {
  transition: background-color 0.25s ease;
}

._df {
  display: flex;
}

._dfc {
  display: flex;
  flex-direction: column;
}

._mc {
  margin: auto;
}

._mvc {
  margin-top: auto;
  margin-bottom: auto;
}

._mhc {
  margin-right: auto;
  margin-left: auto;
}

._tac {
  text-align: center;
}

// Margins
@mixin generate($prefix, $property) {
  $sizes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // List of sizes to generate for each
  $spacing: 0.5rem; // Spacing to multiply the sizes by

  // Loop through all of the sizes(we use @for rather than @each, as we want access to the index)
  @for $i from 1 through length($sizes) {
    $size: nth($sizes, $i); // Get the size for the current index

    // Create the rule
    .#{$prefix}-#{$i - 1} {
      #{$property}: $spacing * $size;
    }
  }
}

@include generate(_m, margin);
@include generate(_mt, margin-top);
@include generate(_mr, margin-right);
@include generate(_mb, margin-bottom);
@include generate(_ml, margin-left);

@include generate(_p, padding);
@include generate(_pt, padding-top);
@include generate(_pr, padding-right);
@include generate(_pb, padding-bottom);
@include generate(_pl, padding-left);

// Toast
:global(.Toastify__toast) {
  a {
    color: var(--primaryAccentColor);
  }
}

body {
  --primaryAccentColor: #f14d1d !important;

  ._Link:hover {
    --linkColor1: #d8481e;
    --linkColor2: #d8481e;
  }

  ._withHover:hover > div,
  ._withHover._hover > div {
    --withHoverColor1: #d8481e !important;
    --withHoverColor2: #d8481e !important;
  }

  ._Tab._active {
    --tabColor1: #f14d1d;
    --tabColor2: #f14d1d;

    &:after {
      --tabBorderColor1: #f14d1d;
      --tabBorderColor2: #f14d1d;
    }
  }

  [class*='Input_module_Input'] {
    [class*='Input_module_Label'] {
      font-family: 'Kanit', sans-serif;
      font-weight: 300;
    }

    [class*='Input_module_InputWrapper'] {
      margin-top: 4px;
      border-radius: 0.75rem;

      [class*='Button_module_Button'] {
        border-radius: 0.5rem !important;
      }
    }
  }

  [class*='Button_module_Button'] {
    background: #f14d1d;

    &:hover {
      background-color: #d8481e;
      --buttonColor1: #d8481e;
      --buttonColor2: #d8481e;
    }

    &:disabled {
      background-color: rgba(#f14d1d, 0.3);
    }

    [class*='Button_module_large'] {
      border-radius: 0.75rem;
    }
  }

  [class*='Typography_module_Typography'] {
    &[class*='Typography_module_h2'] {
      font-family: 'Kanit', sans-serif;
      font-size: 24px;
      line-height: 28px;
    }

    &[class*='Typography_module_h3'] {
      font-family: 'Kanit', sans-serif;
    }
  }

  [class*='Collapse_Title'] {
    [class*='Icon_module_IconContainer'] {
      height: 23px;
      width: auto;

      [class*='Icon_module_Icon'] {
        width: 23px;
      }
    }
  }

  &._theme {
    &._light {
      [class*='Switch_module_Switch'] {
        [class*='Icon_module_IconContainer'] {
          [class*='Icon_module_Icon'] {
            background-image: url('../../../../public/light.svg') !important;
          }
        }
      }
    }

    &._dark {
      [class*='Switch_module_Switch'] {
        [class*='Icon_module_IconContainer'] {
          [class*='Icon_module_Icon'] {
            background-image: url('../../../../public/dark.svg') !important;
          }
        }
      }
    }
  }
}
